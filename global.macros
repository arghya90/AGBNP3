#################################################################
# global macros
#################################################################

F = f
O = o
EXE =
# The := += hackery below is needed to set SPACE to " ".
SPACE :=
SPACE +=
OBJ_OUT_FLAG=-o$(SPACE)
FOR_OUT_FLAG=-o$(SPACE)
EXE_OUT_FLAG=-o #
STATIC_OUT_FLAG=
DYN_OUT_FLAG=-o
AR = ar
LD = $(CXX_SHARED_LINKER)
ARFLAGS = rs
STATIC_LIBEXT = a
LIBEXT = $(STATIC_LIBEXT)

VERS_CandCXXFLAGS = $(MACH_CandCXXFLAGS) $(MACH_COPT) $(MACH_CWARN) \
$(MACH_CSTRICT)
VERS_CandCXXFLAGS_SAFE = $(MACH_CandCXXFLAGS) $(MACH_COPT_SAFE) $(MACH_CWARN) \
$(MACH_CSTRICT)
VERS_FFLAGS = $(MACH_FFLAGS) $(MACH_FOPT) $(MACH_FWARN) \
$(MACH_FSTRICT)
VERS_FFLAGS_SAFE = $(MACH_FFLAGS) $(MACH_FOPT_SAFE) $(MACH_FWARN) \
$(MACH_FSTRICT)




LIBS = $(LIB_PATH) $(LOCAL_LIBS) \
       $(VERS_LIBS) $(VERS_SYSLIBS)

CFLAGS = $(ARCH) $(TERMINATE_FLAG) $(VERS_CFLAGS) $(VERS_CandCXXFLAGS) \
 $(LOCAL_CFLAGS) $(LOCAL_CandCXXFLAGS) $(INC_PATH)

CFLAGS_SAFE = $(ARCH) $(TERMINATE_FLAG) $(VERS_CFLAGS) $(VERS_CandCXXFLAGS_SAFE) $(LOCAL_CFLAGS) $(LOCAL_CandCXXFLAGS) $(INC_PATH)

CXXFLAGS = $(ARCH) $(TERMINATE_FLAG) $(VERS_CXXFLAGS) $(VERS_CandCXXFLAGS) \
 $(LOCAL_CXXFLAGS) $(LOCAL_CandCXXFLAGS) $(INC_PATH)

CXXFLAGS_SAFE = $(ARCH) $(TERMINATE_FLAG) $(VERS_CXXFLAGS) $(VERS_CandCXXFLAGS_SAFE) \
 $(LOCAL_CXXFLAGS) $(LOCAL_CandCXXFLAGS) $(INC_PATH)

FFLAGS = $(ARCH) $(TERMINATE_FLAG) $(VERS_FFLAGS) \
 $(LOCAL_FFLAGS) $(INC_PATH)

FFLAGS_SAFE = $(ARCH) $(TERMINATE_FLAG) $(VERS_FFLAGS_SAFE) \
 $(LOCAL_FFLAGS) $(INC_PATH)

#use LFLAGS when linking a binary with $(CC), $(LD), OR $(CXX)
LFLAGS = $(ARCH) $(LINK_TYPE) $(VERS_LFLAGS) $(LOCAL_LFLAGS)
#use F_LFLAGS when linking a binary with $(FC), $(F77), or $(F90)
F_LFLAGS = $(ARCH) $(F_LINK_TYPE) $(VERS_LFLAGS) $(VERS_F_LFLAGS) $(LOCAL_LFLAGS) $(FC_LINKER_STDC)


default_target: all
